-------------------
How to use 0-add_integer.txt
-------------------

This module defines an integer addition function ''add_int(a, b=98)''.

Usage
------

add_int(...)''' returns the addition of the two arguments. For numbers,
that value is equivalent to using the ''+'' operator.

::

>>>add_int = __import__('0-add_integer').add_int
>>>add_int(2, 3)
5

::
add_int(2, -3)
-1

The fuction also works with floating point values

::

>>add_int(2.0, 3.0)
5

Note that floats are cast to integres before addition


::

add_int(2.9, 0.2)
2

::

>>>add_int(-2.9, -0.2)
-2

Floating and non floating point values can be combined

::

>>>add_int(2.3, -3)
-1

The second arg is optional-by default it is 98

::
>>>add_int(2)
100

Non-numbers
------------

''add_int()'' expects tat both args are are either integers or floats
If either arg is non-Int or Non-Float, a TypeError is raised:

::

>>>add_int("hello", 3)
Traceback(most recent call last):
TypeError: a musy be an integer

::

>>add_int(2, "hello")
Traceback(most recent call last):
TypeError: b ust be an integer

::

>>>add_int(None)
Traceback(most recent call last):
TyeoeError: a must be an integer

::

>>>add_int(2.3, None)
Traceback(most recent call last):
TypeError: b must be an integer

If both args are non-integers and non-floats, a TypeEerror message
is printed for only the first arg

::
>>>add_int("hello", "there")
Traceback(most recent call last)
TypeError: a must be an integer

The function will fall if no infinity is provided

::

>>>add_int(float('inf'))
OverflowError: cannot convert float infinity to integer

::

>>>add_int(2, float('inf'))
Traceback(most recent call last):
OverflowError: cannot convery float infinity to integer

And again with NaN numbers.

::

>>>add_int(float('nan'))
Traceback(most recent call last):
ValueError: cannot convert float NaN to integer

::

>>>add_int(2, foat('nan'))
Traceback(most recent call last):
ValueError: cannot convert float NaN to integer
