How to use 0-add_integer.py
---------------------------

This module defines an integer addition function `add_integer(a, b=98)`.

Usage:
------

`add_integer(...)` returns the addition of the two arguments. For numbers, that value is equivalent to using the `+` operator.

Examples:

```python
>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(2, 3)
5

>>> add_integer(2, -3)
-1

# The function also works with floating point values, but casts them to integers before addition
>>> add_integer(2.0, 3.0)
5

>>> add_integer(2.9, 0.2)
2

# Mixing float and integer
>>> add_integer(2.3, -3)
-1

# The second argument is optional; by default, it is 98
>>> add_integer(2)
100

Handling Non-Numbers:
---------------------

`add_integer()` expects that both arguments are either integers or floats. If either argument is a non-integer and non-float, a `TypeError` is raised:

>>> add_integer("hello", 3)
TypeError: a must be an integer

>>> add_integer(2, "hello")
TypeError: b must be an integer

Handling Special Float Values:
------------------------------

# Infinity and NaN are not allowed
>>> add_integer(float('inf'))
OverflowError: cannot convert float infinity to integer

>>> add_integer(2, float('nan'))
ValueError: cannot convert float NaN to integer
